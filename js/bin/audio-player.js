// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['event-bus', 'text!templates/activities/audio-player.jade'], function(EventBus, audioPlayerTemplate) {
    var AudioPlayerBase;
    return AudioPlayerBase = (function(_super) {
      var audioPlayerNumber;

      __extends(AudioPlayerBase, _super);

      function AudioPlayerBase() {
        this.handlePlayerLoadedData = __bind(this.handlePlayerLoadedData, this);
        return AudioPlayerBase.__super__.constructor.apply(this, arguments);
      }

      audioPlayerNumber = 0;

      AudioPlayerBase.prototype.defaults = {
        showSegments: false,
        skipTime: 10
      };

      AudioPlayerBase.prototype.events = {
        'click .jp-rewind': 'skipBackward',
        'click .jp-ff': 'skipForward'
      };

      AudioPlayerBase.prototype.initialize = function() {
        this.options = _.defaults(this.options, this.defaults);
        this.options.playerNumber = audioPlayerNumber++;
        this.audioUrl = this.model.get('audio_url');
        this.template = _.template(audioPlayerTemplate);
        return this.mediaLoaded = false;
      };

      AudioPlayerBase.prototype.render = function() {
        this.$el.html(this.template(this.options));
        return this.initPlayer();
      };

      AudioPlayerBase.prototype.initPlayer = function() {
        var _this = this;
        this.$voxyPlayer = this.$("#resource-jplayer-" + this.options.playerNumber).jPlayer({
          preload: 'none',
          swfPath: "" + STATIC_URL + "js/thirdparty/jQuery.jPlayer.2.2.0/",
          supplied: 'mp3',
          wmode: 'window',
          cssSelectorAncestor: "#resource-jplayer-container-" + this.options.playerNumber,
          size: {
            width: '0px',
            height: '0px'
          },
          ready: function() {
            return _this.$voxyPlayer.jPlayer('setMedia', {
              mp3: _this.audioUrl
            });
          },
          timeupdate: function(event) {
            _this.customControls.progress.slider("value", event.jPlayer.status.currentPercentAbsolute);
            return _this.trigger('timeupdate', event);
          },
          play: function(event) {
            _this.isPlaying = true;
            return _this.trigger('play', event);
          },
          pause: function(event) {
            _this.isPlaying = false;
            return _this.trigger('pause', event);
          },
          ended: function(event) {
            _this.isPlaying = _this.wasPlaying = false;
            return _this.trigger('ended', event);
          },
          progress: this.handlePlayerLoadedData,
          loadeddata: this.handlePlayerLoadedData
        });
        this.createCustomControls();
        this.listenTo(EventBus, 'vocab:audio_play', function() {
          _this.wasPlaying = _this.isPlaying;
          return _this.pause();
        });
        return this.listenTo(EventBus, 'vocab:audio_ended', function() {
          if (_this.wasPlaying) {
            return _this.play();
          }
        });
      };

      AudioPlayerBase.prototype.getControlAncestor = function() {
        return this.$("#resource-jplayer-container-" + this.options.playerNumber);
      };

      AudioPlayerBase.prototype.stop = function() {
        var _ref;
        return (_ref = this.$voxyPlayer) != null ? _ref.jPlayer('stop') : void 0;
      };

      AudioPlayerBase.prototype.hide = function() {
        return this.$el.hide('fast');
      };

      AudioPlayerBase.prototype.pause = function() {
        var _ref;
        return (_ref = this.$voxyPlayer) != null ? _ref.jPlayer('pause') : void 0;
      };

      AudioPlayerBase.prototype.play = function(time) {
        var _ref, _ref1;
        if (time != null) {
          return (_ref = this.$voxyPlayer) != null ? _ref.jPlayer('play', +time) : void 0;
        } else {
          return (_ref1 = this.$voxyPlayer) != null ? _ref1.jPlayer('play') : void 0;
        }
      };

      AudioPlayerBase.prototype.movePlayhead = function(time) {
        var currentTime;
        currentTime = this.voxyPlayerData.status.currentTime;
        this.$voxyPlayer.jPlayer("play", currentTime + time || 0);
        return false;
      };

      AudioPlayerBase.prototype.createCustomControls = function() {
        var _this = this;
        this.voxyPlayerData = this.$voxyPlayer.data("jPlayer");
        this.customControls = {
          progress: this.$(".jp-progress-slider"),
          volume: this.$(".jp-volume-slider"),
          rewind: this.$(".jp-rewind"),
          forward: this.$(".jp-ff")
        };
        return this.customControls.progress.slider({
          animate: "fast",
          max: 100,
          range: "min",
          step: 0.1,
          value: 0,
          slide: function(event, ui) {
            var handleWidth, offset, sp;
            sp = _this.voxyPlayerData.status.seekPercent;
            if (sp > 0) {
              _this.$voxyPlayer.jPlayer("playHead", ui.value * (100 / sp));
              handleWidth = 25;
              offset = handleWidth * (ui.value / 100);
              return $('.ui-slider-handle').css('margin-left', "-" + offset + "px");
            } else {
              return setTimeout(function() {
                return _this.customControls.progress.slider("value", 0);
              }, 0);
            }
          }
        });
      };

      AudioPlayerBase.prototype.skipBackward = function() {
        return this.movePlayhead(-this.options.skipTime);
      };

      AudioPlayerBase.prototype.skipForward = function() {
        return this.movePlayhead(this.options.skipTime);
      };

      AudioPlayerBase.prototype.handlePlayerLoadedData = function(event) {
        var duration, seekPercent, _ref;
        _ref = event.jPlayer.status, duration = _ref.duration, seekPercent = _ref.seekPercent;
        if (seekPercent >= 100 && duration > 0) {
          this.mediaDuration = duration;
          if (!this.mediaLoaded) {
            this.trigger('mediaLoaded', event);
            return this.mediaLoaded = true;
          }
        }
      };

      return AudioPlayerBase;

    })(Backbone.View);
  });

}).call(this);
