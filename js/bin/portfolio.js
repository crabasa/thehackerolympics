// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['event-bus'], function(EventBus) {
    var TranslatePopup, UtilityPane;
    UtilityPane = (function(_super) {

      __extends(UtilityPane, _super);

      UtilityPane.prototype.events = {
        'click .pane-toggle': 'togglePane'
      };

      function UtilityPane() {
        this.events = _.extend(this.events, UtilityPane.prototype.events);
        this.visible = false;
        this.enabled = true;
        UtilityPane.__super__.constructor.apply(this, arguments);
      }

      UtilityPane.prototype.initialize = function() {
        var _this = this;
        this.listenTo(EventBus, 'utility-pane:show', function(pane) {
          if (pane !== _this) {
            return _this.togglePane(void 0, false);
          }
        });
        this.listenTo(EventBus, 'utility-pane:hideall activity:start', function() {
          return _this.togglePane(void 0, false);
        });
        return this.listenTo(EventBus, 'utility-pane:set-enabled', function(paneId, enabled) {
          if (paneId === _this.paneId || paneId === 'all') {
            return _this.setEnabled(enabled);
          }
        });
      };

      UtilityPane.prototype.positionPane = function() {
        var linkWidth, paneWidth;
        this.toggleLink = this.$('.pane-toggle');
        this.utilPane = this.$('.toggleable-pane');
        linkWidth = this.toggleLink.outerWidth();
        paneWidth = this.utilPane.outerWidth();
        return this.utilPane.css('margin-left', -(paneWidth - linkWidth) / 2);
      };

      UtilityPane.prototype.togglePane = function(event, state) {
        if (state == null) {
          state = !this.visible;
        }
        if (!this.enabled) {
          return;
        }
        this.visible = state;
        if (this.visible) {
          EventBus.trigger('utility-pane:show', this);
          this.positionPane();
          (this.$('.pane-toggle')).addClass('active');
          return (this.$('.toggleable-pane')).show();
        } else {
          (this.$('.pane-toggle')).removeClass('active');
          return (this.$('.toggleable-pane')).hide();
        }
      };

      UtilityPane.prototype.setEnabled = function(enabled) {
        this.enabled = enabled;
        (this.$('.pane-toggle')).toggleClass('disabled', !enabled);
        (this.$('.pane-toggle i')).toggleClass('icon-blue', enabled);
        return (this.$('.pane-toggle i')).toggleClass('icon-gray', !enabled);
      };

      return UtilityPane;

    })(Backbone.View);
    return TranslatePopup = (function(_super) {

      __extends(TranslatePopup, _super);

      function TranslatePopup() {
        this.switchLang = __bind(this.switchLang, this);

        this.showError = __bind(this.showError, this);

        this.showTranslation = __bind(this.showTranslation, this);

        this.clearTranslation = __bind(this.clearTranslation, this);
        return TranslatePopup.__super__.constructor.apply(this, arguments);
      }

      TranslatePopup.prototype.tagName = 'li';

      TranslatePopup.prototype.paneId = 'translate';

      TranslatePopup.prototype.events = {
        'click .btn-search': 'sendToGoogle',
        'click .btn-switch': 'switchLang',
        'keydown input.native-term': 'clearTranslation'
      };

      TranslatePopup.prototype.baseUrl = 'https://www.googleapis.com/language/translate/v2';

      TranslatePopup.prototype.initialize = function() {
        TranslatePopup.__super__.initialize.apply(this, arguments);
        this.template = _.template(translatePopupTemplate);
        return this.reversed = false;
      };

      TranslatePopup.prototype.render = function() {
        var lang;
        this.$el.html($(this.template({
          userProfile: CONFIG_GLOBAL.userProfile
        })));
        lang = CONFIG_GLOBAL.userProfile.lang;
        this.langDict = $.parseJSON(this.$('#langDict').html());
        this.$transContainer = this.$('input.trans-term');
        this.$form = this.$('form#translate-form');
        this.nativeCode = lang["native"];
        this.learningCode = lang.learning;
        this.$('.native-lang').html(this.langDict[this.nativeCode]);
        return this.$('.trans-lang').html(this.langDict[this.learningCode]);
      };

      TranslatePopup.prototype.sendToGoogle = function() {
        this.searchTerm = this.$('input.native-term').val();
        return $.ajax({
          url: this.baseUrl,
          dataType: 'jsonp',
          data: {
            key: 'AIzaSyD0EKvENV3KQG8S2fHVMONrChGSILK8kX4',
            q: this.searchTerm,
            source: this.nativeCode,
            target: this.learningCode
          },
          success: this.showTranslation,
          error: this.showError
        });
      };

      TranslatePopup.prototype.clearTranslation = function() {
        this.$transContainer.val('');
        return this.$transContainer.removeClass('success');
      };

      TranslatePopup.prototype.showTranslation = function(result) {
        this.translation = result.data.translations[0].translatedText;
        this.$transContainer.val(this.translation);
        return this.$transContainer.addClass('success');
      };

      TranslatePopup.prototype.showError = function(errorMsg) {
        return this.$form.append(errorMsg);
      };

      TranslatePopup.prototype.switchLang = function() {
        this.$('.trans-lang').toggleClass('left');
        this.$('.native-lang').toggleClass('right');
        if (this.reversed !== true) {
          this.nativeCode = CONFIG_GLOBAL.userProfile.lang.learning;
          this.learningCode = CONFIG_GLOBAL.userProfile.lang["native"];
          return this.reversed = true;
        } else {
          this.nativeCode = CONFIG_GLOBAL.userProfile.lang["native"];
          this.learningCode = CONFIG_GLOBAL.userProfile.lang.learning;
          return this.reversed = false;
        }
      };

      return TranslatePopup;

    })(UtilityPane);
  });

}).call(this);
